name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.2.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install bump2version
    
    - name: Configure git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Update version
      run: |
        # Update version in pyproject.toml
        sed -i "s/version = \".*\"/version = \"${{ github.event.inputs.version }}\"/" pyproject.toml
        
        # Update version in __init__.py
        sed -i "s/__version__ = \".*\"/__version__ = \"${{ github.event.inputs.version }}\"/" python_optimizer/__init__.py
    
    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git commits since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          CHANGELOG=$(git log $LAST_TAG..HEAD --pretty=format:"- %s (%h)" --no-merges)
        else
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --no-merges)
        fi
        
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT
    
    - name: Update CHANGELOG.md
      run: |
        # Backup current changelog
        cp CHANGELOG.md CHANGELOG.md.bak
        
        # Create new changelog entry
        echo -e "# Changelog\n" > CHANGELOG_NEW.md
        echo "## [${{ github.event.inputs.version }}] - $(date +%Y-%m-%d)" >> CHANGELOG_NEW.md
        echo "" >> CHANGELOG_NEW.md
        echo "${{ steps.changelog.outputs.CHANGELOG }}" >> CHANGELOG_NEW.md
        echo "" >> CHANGELOG_NEW.md
        
        # Append rest of old changelog (skip first line which is just "# Changelog")
        tail -n +2 CHANGELOG.md >> CHANGELOG_NEW.md
        mv CHANGELOG_NEW.md CHANGELOG.md
    
    - name: Commit version updates
      run: |
        git add pyproject.toml python_optimizer/__init__.py CHANGELOG.md
        git commit -m "chore: bump version to ${{ github.event.inputs.version }}"
        git push origin main
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.event.inputs.version }}
        name: Release v${{ github.event.inputs.version }}
        body: |
          ## Changes in v${{ github.event.inputs.version }}
          
          ${{ steps.changelog.outputs.CHANGELOG }}
          
          ## Installation
          
          ```bash
          pip install python-optimizer==${{ github.event.inputs.version }}
          ```
          
          ## Full Changelog
          
          See [CHANGELOG.md](https://github.com/thinmanj/python-optimizer/blob/main/CHANGELOG.md) for complete details.
        prerelease: ${{ github.event.inputs.prerelease }}
        draft: false

  test-package:
    name: Test Package Installation
    runs-on: ${{ matrix.os }}
    needs: prepare-release
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.11", "3.12"]
    
    steps:
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Wait for PyPI release
      run: |
        echo "Waiting for package to be available on PyPI..."
        sleep 300  # Wait 5 minutes for PyPI to process
    
    - name: Test installation from PyPI
      run: |
        pip install python-optimizer==${{ github.event.inputs.version }}
        python -c "import python_optimizer; print(f'Version: {python_optimizer.__version__}')"
    
    - name: Test basic functionality
      run: |
        python -c "
        from python_optimizer import optimize
        
        @optimize(jit=True)
        def test_func(x):
            return x * 2
        
        result = test_func(5)
        assert result == 10, f'Expected 10, got {result}'
        print('âœ… Basic functionality test passed')
        "