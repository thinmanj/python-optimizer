[project]
name = "python-optimizer"
version = "1.0.0"
description = "High-performance Python optimization toolkit with JIT compilation, variable specialization, and runtime optimizations"
readme = "README.md"
requires-python = ">=3.11"
authors = [
    {name = "Julio Ona", email = "thinmanj@gmail.com"}
]
maintainers = [
    {name = "Julio Ona", email = "thinmanj@gmail.com"}
]
license = {text = "MIT"}
keywords = [
    "optimization",
    "jit",
    "numba",
    "performance",
    "python",
    "compiler",
    "acceleration",
    "genetic-algorithm",
    "trading",
    "financial-computing"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "Intended Audience :: Financial and Insurance Industry",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Software Development :: Compilers",
    "Topic :: Office/Business :: Financial :: Investment",
    "Topic :: System :: Benchmark"
]
dependencies = [
    "numpy>=1.24.0",
    "numba>=0.58.0",
    "pandas>=2.0.0",
    "scipy>=1.10.0",
    "matplotlib>=3.7.0",
    "tqdm>=4.65.0",
    "pydantic>=2.0.0",
    "toml>=0.10.0"
]

[project.optional-dependencies]
dev = [
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.5.0",
    "pre-commit>=3.3.0",
    "sphinx>=7.0.0",
    "sphinx-rtd-theme>=1.3.0",
    "nbsphinx>=0.9.0"
]
gpu = [
    "cupy-cuda12x>=12.0.0",  # For CUDA support
    "numba[cuda]>=0.58.0"
]
ml = [
    "torch>=2.0.0",
    "tensorflow>=2.13.0",
    "scikit-learn>=1.3.0",
    "optuna>=3.3.0"
]
all = [
    "python-optimizer[dev,gpu,ml]"
]

[project.urls]
Homepage = "https://github.com/thinmanj/python-optimizer"
Documentation = "https://python-optimizer.readthedocs.io"
Repository = "https://github.com/thinmanj/python-optimizer.git"
Issues = "https://github.com/thinmanj/python-optimizer/issues"
Changelog = "https://github.com/thinmanj/python-optimizer/blob/main/CHANGELOG.md"

[project.scripts]
python-optimizer = "python_optimizer.cli:main"
py-opt = "python_optimizer.cli:main"
benchmark-optimizer = "python_optimizer.benchmarks.cli:main"

[build-system]
requires = ["hatchling>=1.18.0"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["python_optimizer"]

[tool.black]
line-length = 88
target-version = ['py311', 'py312', 'py313']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
disallow_untyped_defs = true
disallow_any_generics = true
disallow_untyped_calls = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true

[[tool.mypy.overrides]]
module = ["numba.*", "cupy.*"]
ignore_missing_imports = true

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=python_optimizer",
    "--cov-report=html",
    "--cov-report=term-missing",
    "--cov-report=xml",
    "--cov-fail-under=60"  # Temporarily lowered while adding test coverage
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
    "benchmark: marks benchmark tests"
]

[tool.coverage.run]
source = ["python_optimizer"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/examples/*",
    "*/benchmarks/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
